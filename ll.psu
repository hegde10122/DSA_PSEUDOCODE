Linked list data structure

Salient features:
1) There is no physical relationship between the nodes in a linbked list. Nodes are the elements of a linked list and they are not stored continguosly.
2) A node in a linked list has at least two fields: One contains the data, the other the address of the next node in the sequence.
3) The nodes in a linked list are called self-referential structures.
4) In a self-referential structure, each instance of the structure contains a pointer to another instance of the same structure type.
5) Since there is no physical relationship, we need pointers to distinguish the beginning of the list
   and also to find the logical successor of any given node.
6) The pointer to the beginning of the list is known as the head pointer because it points to the head of the list.
   We call the head pointer as pHead in the listings below and the pointers that identify a node's immediate successor as link.
7) In addition to the head pointer, it is also efficient if we can have a pointer to the last element in the list. This pointer is called pRear.
Linked List Node Structure
------------------------------

list	
	count <integer>
	head <pointer>
end list

node 
	data <dataType>
    link <pointer>
end node

	
When a node contains data about a list, the data is called metadata that is data about the data in the list. Example: count is a metadata that 
tells the user about the number of nodes in the list.

A typical dataType is given below:

dataType
	key <keyType>
	field1 <fieldType>
	field2 <fieldType>
	...
	fieldN <fieldType>
end dataType


Linked List algorthms - Pseudocode

1) Create List
   
   This algorithm receives the head structure and initialises the metadata for the list.
   algorithm createList (ref list <metadata>)
   Initialises metadata for the linked list
		Pre   list is metadata structure passed by reference
        Post  metadata initialised
    1  	list.head = null
    2   list.count = 0
    3 return
   end createList

2) Insert Node

This adds data to a linked list. We only need its logical predecessor to insert a node into the list. Given the predecessor, there are three steps
to the insertion.
	a. Allocate memory for the new node and insert data
	b. Point the node to its successor
	c. Point the predecessor of the new node to the new node.
	
When we are trying to insert a node into a list the list could either be empty or have at least one node. 
We also need to know the location of the node that precedes this node. The predecessor node is identified by a pointer that can be either null or pointing to a 
node. If the pointer is null, it means that the new node that we are about to add is at the beginning of the list or an empty list.
If the predecessor is not null , then we are adding the node after the first node - that is either in the middle of the list or at the end of the list.
	
Insert into empty list
---------------------
When the head pointer of a list is null, the list is empty. TO add the new node to the empty list, we assign the address of the new node to the list head pointer.
The link field of the new node is then set to null.

pNew -> link = list.head	//set the link to null pointer
list.head = pNew            //point list to first node

Insert at the beginning of the list
----------------------------------
This case demands us to add a node before the first node of the list. The first node of the list has its address stored in the head pointer.
To add a node at the beginning, we point the new node to the first node in the list. Then we set the head pointer to point to the new first node.

pNew -> link = list.head
list.head = pNew

The above two conditions have the same logic. 

Insert in the middle (between two nodes)
----------------------------------------
In this case the predecessor will have an address.  The new node will also have a successor. We point the new node to its successor and point
its predecessor to the new node. The address of the new node's successor can be found in the predecessor's link field.

pNew -> link = pPre -> link
pPre -> link = pNew


Insert at the end
---------------------
This means that the last node in the linked list will have a null pointer. The predecessor node which is currently pointing to null will 
now point to the new node after insertion.

pNew -> link = pPre -> link //predecessor is pointing to null. We change it such that the new node points to null
pPre -> link = pNew

The above snippet is same as the pseudocode for inserting a new node between two existing nodes.

The pseudocode is listed below:

algorithm insertNode(ref list<metadata>, val pPre <node pointer>,val dataIn <dataType>)

Inserts data into a new node in the linked list
	Pre   list is metadata structure to a valid list
          pPre is pointer to data's logical predecessor
          dataIn contains to be inserted
    Post  data has been inserted into the linked list
    Return true if successful, false if the memory overflows	
	1 allocate (pNew)
	2 if(memory overflow)
	  1 return false
	3 end if
    4 pNew -> data = dataIn
    5 if (pPre is null)
      Adding before first node or to an empty list
      1 pNew -> link = list.head
      2 list.head = pNew
 	6 else 
	  Adding in the middle or at the end
      1 pNew -> link = pPre -> link
      2 pPre -> link = pNew
    7 end if
	8 list.count = list.count + 1
    9 return true
end insertNode
  	
3) Delete a Node
-------------------
A node in a linked list is removed by changing various link pointers and then physically deleteing the node from dynamic memory.
Firstly, we must locate the node by knowing its address and its predecessor's address. Once we locate the node to be deleted, we then change the 
predecessor's link field to point to the deleted node's successor. The deleted node is recycled back to the memory.
If the list has only one node then deleteion of that node results in an empty list. In such a case, the head must point to null.

Delete first node
-------------------

When we delete the first node then we must reset the head pointer to point to the firs node's successor and then recycle the memory for the deleted node.
If the predecessor is a null pointer then it means that we are deleting the first node. The following pseudocode explains this logic.

list.head = pLoc -> link //pLoc is the pointer that identifies the node to be deleted
recycle(pLoc) // recycle is the pseudo command that returns a node's space to dynamic memory

General delete case
--------------------

Deleting any node in the middle of a linked list or at the end, involves the same process - The predecessor node points to the successor of the 
node being deleted. If the node is the last node, then we move the predecessor's link field point to null making the predecessor the new logical end
of the list. The pseudocode for this case is summed in the two lines below.

pPre -> link = pLoc -> link
recycle(pLoc)

algorithm deleteNode(ref list <metadata>,
                    val pPre <node pointer>,
					val pLoc <node pointer>,
					ref dataOut <dataType>)
Deletes data from a linked list and returns it to calling module.
	Pre list is metadata structure to a valid list  
	    pPre is a pointer to predecessor node
        pLoc is a pointer to a node being deleted
        data is a variable to receive data to be deleted
    Post data has been deleted and returned to the calling method

    1  dataOut = pLoc -> data
    2  if(pPre is null)
       deleting first node
       1 list.head = pLoc -> link
    3  else
       Deleting other nodes
       1 pPre -> link = pLoc -> link 
    4  end if
	5  list.count = list.count - 1
    6 recycle(pLoc)
    7 return
end deleteNode

4) Ordered list search
-----------------------------------

In a linked list, we have search sequentially for a nod because there is no physical relationship amongst nodes. We search the list based on key values.
In a simple linked lists both the data and the key can be the same value. In a complex structure, where data consists of multiple field values, we need about
separate key field. In an ordered list that we are considering here the values in the linked list are in non-descending order.
Given a target key, the ordered list search attempts to locate the requested node in the linked list. If a node in the list matches the target the search
returns true; if there are no key matches then the search returns false. We start from the beginning and search sequentially until the target value is no longer
greater than the current value of node's key. At this point, the target value is either less than or equal to the current node's key while the
predecessor is pointing to the node immediately before the current node. We then test the current node and set the return value true if the target value is
equal to the list value or false if it is less and terminate the seearch.

algorithm orderedSearchList(val list <metadata>, ref pPre <node pointer>, ref pLoc <node pointer>, val target <key type>)
Searches list and passes back address of node containing target and its logical predecessor
	Pre 	list is metadata structure to a valid list
	        pPre is pointer variable for predecessor
			pLoc is pointer variable for current node
			target is the key being sought
	Post    pLoc points to first node with equal/greater key or null if target > key of last node
	        pPre points to largest node smaller than key or null if target < key of first node
	Return  true if found, false if not found
    1  pPre = null
    2  pLoc = list.head
    3  loop(pLoc not null AND target > pLoc -> data.key)
       1  pPre = pLoc
       2  pLoc = pLoc -> link
    4  end loop
       Set return value
    5  if(pLoc is null)
       1 found = false
    6  else	   
	   1 if(target equal pLoc -> data.key)
         1 found = true
       2 else
         1 found = false
       3 end if
    7  end if
    8  return found
end orderedSearchList

5)  Retrieve Node
------------------
Retrieve node uses the orderedSearchList algorithm to locate data in the list. If the data is found, it moves data to the output area 
in the calling module and returns true. If not found then the it returns false.

algorithm retrieveNode (val list <metadata>, val key <key type>, ref dataOut <dataType>)
Retrieves data from a linked list
	Pre  list is metadata structure to a valid list
	     key is target of data to be retrieved
		 dataOut is variable to receive retrieved data
    Post data placed in dataOut or error if data not found
	Return true if successful or false if data is not found
	1  found = orderedSearchList(list, pPre, pLoc, key)
	2  if (found)
	   1 dataOut = pLoc -> data
	3  end if
    4  return found
end retrieveNode

6) Empty List
--------------
An empty list is a module that reutns a boolean indicating the presence of data in the list or that it is empty.

algorithm emptyList(val list <metadata>)
Returns boolean indicating whether the list is empty
	Pre  list is metadata structure to a valid list
    Return true if list is empty, false if list contains data
    1  return (list.count equal to zero)
end emptyList

7) Full list
--------------
We can test for a full list by trying to allocate memory for a new node. If we are successful, we simply recycle the memory and return 
false - the list is not full. If we are unsuccessful then the dynamic memory is full  and we return true.

algorithm fullList(val list <metadata>)
Returns boolean indicating whether or not the list is full
	Pre list is metadata structure to a valid list
	Return  false if room for new node: true if memory full
	1 allocate (pNew)
	2 if (allocation successful)
      1 recycle (pNew)
      2 return false
    3 end if
    4 return true
end fullList

8) List count
--------------
algorithm listCount(val list <metadata)
Returns the integer representing number of nodes in the list
	Pre list is metadata structure to a valid list
	Return count for number of nodes in list
   1 return (list.count)
end listCount

9) Traverse List
--------------------

Traversal logic is used by algorithms that start from the first node till the list is completed for a variety of tasks like printing the list, summing a 
list, changing the value of a node etc.
We use a walking pointer that moves from node to node as each element is processed. Assuming a linked list with a head structure, we set a walking 
pointer to the first node in the list. By using a loop we continue until all the data has been processed.       
	

	
	
	

	

 







   